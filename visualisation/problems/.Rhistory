#Range
n <- 0:c
b <- g / c
n * b - s * 2
#Grid
g <- 50 * 16 + 10 * 16 #| 960
#Space
s <- 10
#Margin
m <- 0
#Columns
c <- 16
#Range
n <- 0:c
b <- g / c
n * b - s * 2 + 20
#Grid
g <- 50 * 16 + 10 * 16 #| 960
#Space
s <- 10
#Margin
m <- 0
#Columns
c <- 16
#Range
n <- 0:c
b <- 50
n * b - s * 2 + 20
#Grid
g <- 50 * 16 + 10 * 16 #| 960
#Space
s <- 10
#Margin
m <- 0
#Columns
c <- 16
#Range
n <- 0:c
b <- 50
n * b - s * 2
f = 960
n = 1
c = 16
g = 10
f = n(c) + n-1(g)
n-1(g)
n*c + n-1*g
f = 960
n = 1:16
c = 16
g = 10
f = n*c + n-1*g
f
install.packages("tm")
library(tm)
?findAssocs
data("crude")
tdm <- TermDocumentMatrix(crude)
findAssocs(tdm, c("oil", "opec", "xyz"), c(0.7, 0.75, 0.1))
crude
tdm
findAssocs(tdm, c("oil", "opec", "xyz"), c(0.7, 0.75, 0.1))
data("crude")
tdm <- TermDocumentMatrix(crude)
findAssocs(tdm, c("oil", "opec", "xyz"), c(0.5)
data("crude")
tdm <- TermDocumentMatrix(crude)
findAssocs(tdm, c("oil", "opec", "xyz"), c(0.5))
data("crude")
tdm <- TermDocumentMatrix(crude)
findAssocs(tdm, c("oil", "opec", "xyz"), c(0.9))
data("crude")
tdm <- TermDocumentMatrix(crude)
findAssocs(tdm, c("oil", "opec", "xyz"), c(0.7))
docs <- c("This is a text.", "This another one.")
vs <- VectorSource(docs)
elem <- getElem(stepNext(vs))
(result <- readPlain(elem, "en", "id1"))
meta(result)
result
ds <- readTabular(data.frame(c("kip")))
ds <- TermDocumentMatrix(ds)
findAssocs(ds, c("oil", "opec", "xyz"), c(0.7))
data.frame(c("kip"))
ds <- readTabular(
data.frame(c("kip"))
)
ds
ds <- readTabular(
data.frame(c("kip"))
)
extractContentDOM("http://jeroensteen.nl/cv", 0.8, asText = TRUE)
install.packages("tm.plugin.webmining")
library(tm.plugin.webmining)
extractContentDOM("http://jeroensteen.nl/cv", 0.8, asText = TRUE)
library(tm)
extractContentDOM("http://jeroensteen.nl/cv", 0.8, asText = TRUE)
install.packages("arules")
library(arules)
library(arules)
rules <- apriori(titanic.raw)
inspect(rules)
library(arules)
rules <- apriori(titanic)
inspect(rules)
titanic
ds <- data.frame(c(
"kaas",
"tomaat"
))
rules <- apriori(ds)
inspect(rules)
inspect(rules)
inspect(rules)
rules
library(arules)
ds <- data.frame(c(
"kaas",
"tomaat"
))
rules <- apriori(ds)
rules = apriori(ds, parameter=list(
support=0.01,
confidence=0.5)
)
inspect(rules)
library(arules)
ds <- data.frame(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
))
rules <- apriori(ds)
rules = apriori(ds, parameter=list(
support=0.01,
confidence=0.5)
)
inspect(rules)
library(arules)
ds <- data.frame(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
))
rules <- apriori(ds)
rules = apriori(ds, parameter=list(
support=0.01,
confidence=0.5)
)
inspect(rules)
ds <- data.frame(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
))
library(arules)
ds <- data.frame(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
rules <- apriori(ds)
rules = apriori(ds, parameter=list(
support=0.01,
confidence=0.5)
)
inspect(rules)
ds <- data.frame(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
ls <- list(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
length(ls)
ls <- list(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
names(ls) <- paste("tr",c(1:ls(length)), sep = "")
names(ls) <- paste("tr", c(1:length(ls)), sep = "")
ls
library(arules)
ls <- list(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
#Set transaction names
names(ls) <- paste("tr", c(1:length(ls)), sep = "")
#Coerce into transactions
trans <- as(a_list, "transactions")
#Analyze transactions
summary(trans)
library(arules)
ls <- list(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
#Set transaction names
names(ls) <- paste("tr", c(1:length(ls)), sep = "")
#Coerce into transactions
trans <- as(a_list, "transactions")
#Analyze transactions
summary(trans)
library(arules)
ls <- list(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
#Set transaction names
names(ls) <- paste("tr", c(1:length(ls)), sep = "")
#Coerce into transactions
trans <- as(ls, "transactions")
#Analyze transactions
summary(trans)
inspect(trans)
library(arules)
ls <- list(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
#Set transaction names
names(ls) <- paste("tr", c(1:length(ls)), sep = "")
#Coerce into transactions
trans <- as(ls, "transactions")
#Analyze transactions
summary(trans)
inspect(trans)
rules <- apriori(ds)
rules = apriori(trans, parameter=list(
support=0.01,
confidence=0.5),
target="rules"
)
inspect(head(sort(rules,by="lift"),n=length(ls)))
#http://www.public.iastate.edu/~vardeman/stat502x/A%20Priori%20Algorithm%20R%20Example.pdf
library(arules)
ls <- list(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
#Set transaction names
names(ls) <- paste("tr", c(1:length(ls)), sep = "")
#Coerce into transactions
trans <- as(ls, "transactions")
#Analyze transactions
summary(trans)
inspect(trans)
rules <- apriori(trans, parameter=list(
support=0.01,
confidence=0.5),
target="rules"
)
inspect(head(sort(rules,by="lift"),n=length(ls)))
rules <- apriori(trans, parameter=list(
support=0.01,
confidence=0.5,
target="rules"),
)
inspect(head(sort(rules,by="lift"),n=length(ls)))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 1), mar=c(3, 3, 3, 30))
legend(x = 10, y = 10,
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend(x = 10, y = 10,
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend(x = 10, y = 10,
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
par(mfrow=c(1, 1), mar=c(0, 0, 0, 0))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
par(mfrow=c(1, 1), mar=c(0, 0, 0, 0))
par(mfrow=c(1, 1), mar=c(0, 0, 0, 0))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("topleft",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("right",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
par(mfrow=c(1, 2), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
legend("right",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("right",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("right",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("right",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
par(mfrow=c(1, 2), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 2), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 2), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 1), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 1), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 1), mar=c(5,5,5,5))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 1), mar=c(5,5,5,5))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten",
main="Mini enquÃªte"
)
par(mfrow=c(1, 1), mar=c(5,5,5,5))
500 * 4
16 * 500
4 * 500
0,27*4
0.27*4
0.27*4*500
setwd("C:/Users/Wim/Desktop/data_science/visualisation/problems")
ds <- read.csv("ds_ebola_2014_summary.csv")
View(ds)
plot(ds$confirmed_cases)
par(mar=c(1,1,1,1))
plot(ds$confirmed_cases)
par(mar=c(1,1,1,1))
plot(ds$confirmed_cases)
plot(ds$confirmed_cases)
plot(0:344^2)
plot( (0:344)^2 )
par(mar=c(1,1,1,1))
plot( (0:344)^2 )
par(mar=c(0,0,0,0))
plot( (0:344)^2 )
par(mar=c(5,5,5,5))
plot( (0:344)^2 )
plot( (0:344)^2 , xlab="Days", ylab="Amount of confirmed cases")
erf
erf(0:344)
package(pracma)
library(pracma)
library(pracma)
install.packages("pracma")
library(pracma)
(0:344) + 0.5 * (0:344^2) * (1 + erf(0:344))
library(pracma)
plot( (0:344) + 0.5 * (0:344^2) * (1 + erf(0:344)) )
plot( (0:344) + (0.5 * (0:344^2)) * (1 + erf(0:344)) )
plot( (0:344 + 0.5 * 0:344^2) * (1 + erf(0:344) )
plot(0:344 + 0.5 * 0:344^2 * 1 + erf(0:344))
plot(0:344 + 0.5 * 0:344^2 * 1 + erf(0:344))
plot( 0:344 + 0.5 * 0:344^2 * (1 + erf(0:344)) )
plot( 0:344 + (0.5 * 0:344^2) * (1 + erf(0:344)) )
1 + erf(0:344)
plot( 0:344 + (0.5 * 0:344^2) * (1 + erf(0:344)) )
plot( 0:344 + 0.5 * 0:344^2 * 1 + erf(0:344) )
plot( 0:344 + 0.5 * 0:344^2 * 1 + erf(0:344) )
plot( 0:344 + 1)
8920 / 344
max(ds$confirmed_cases) / 344
plot( 0:344 + max(ds$confirmed_cases) / 344)
plot( 0:344 * max(ds$confirmed_cases) / 344)
plot( 0:344 * max(ds$confirmed_cases) / 344, xlab="Days", ylab="Amount of confirmed cases")
plot( 0:344 + 0.5 * 0:344^2 * 1 + erf(0:344), xlab="Days", ylab="Amount of confirmed cases")
x <- 0:344
x + 0.5 * x^2 * (1 + erf(x))
plot( x + 0.5 * x^2 * (1 + erf(x)), xlab="Days", ylab="Amount of confirmed cases")
plot( x + 0.2 * x^2 * (1 + erf(x)), xlab="Days", ylab="Amount of confirmed cases")
plot( x + 0.1 * x^2 * (1 + erf(x)), xlab="Days", ylab="Amount of confirmed cases")
plot( x + 0.05 * x^2 * (1 + erf(x)), xlab="Days", ylab="Amount of confirmed cases")
plot( x + 0.029 * x^2 * (1 + erf(x)), xlab="Days", ylab="Amount of confirmed cases")
plot( x + 0.039 * x^2 * (1 + erf(x)), xlab="Days", ylab="Amount of confirmed cases")
plot(ds$confirmed_cases)
plot(ds$confirmed_cases)
plot(x,x,type="l",col="red")
lines(x,x,col="green")
plot(ds$confirmed_cases, type="l", col="red")
lines(x,x,col="green")
plot(ds$confirmed_cases, type="l", col="red")
lines((0:344)^2,col="green")
plot(ds$confirmed_cases, type="l", col="red", xlab="Days", ylab="Amount of confirmed cases")
lines((0:344)^2,col="green")
predict(dssp, 344 + 30 * 3)
dssp <- smooth.spline(ds$outbreak_day, ds$confirmed_cases)
predict(dssp, 344 + 30 * 3)
predict(dssp, 344 + (30 * 3))
predict(dssp, 365 + sum(31,28,1))
