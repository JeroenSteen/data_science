inspect(trans)
library(arules)
ls <- list(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
#Set transaction names
names(ls) <- paste("tr", c(1:length(ls)), sep = "")
#Coerce into transactions
trans <- as(ls, "transactions")
#Analyze transactions
summary(trans)
inspect(trans)
rules <- apriori(ds)
rules = apriori(trans, parameter=list(
support=0.01,
confidence=0.5),
target="rules"
)
inspect(head(sort(rules,by="lift"),n=length(ls)))
#http://www.public.iastate.edu/~vardeman/stat502x/A%20Priori%20Algorithm%20R%20Example.pdf
library(arules)
ls <- list(
c("kaas","tomaat"),
c("kaas", "tomaat", "komkommer"),
c("tomaat")
)
#Set transaction names
names(ls) <- paste("tr", c(1:length(ls)), sep = "")
#Coerce into transactions
trans <- as(ls, "transactions")
#Analyze transactions
summary(trans)
inspect(trans)
rules <- apriori(trans, parameter=list(
support=0.01,
confidence=0.5),
target="rules"
)
inspect(head(sort(rules,by="lift"),n=length(ls)))
rules <- apriori(trans, parameter=list(
support=0.01,
confidence=0.5,
target="rules"),
)
inspect(head(sort(rules,by="lift"),n=length(ls)))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 1), mar=c(3, 3, 3, 30))
legend(x = 10, y = 10,
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend(x = 10, y = 10,
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend(x = 10, y = 10,
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
par(mfrow=c(1, 1), mar=c(0, 0, 0, 0))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
par(mfrow=c(1, 1), mar=c(0, 0, 0, 0))
par(mfrow=c(1, 1), mar=c(0, 0, 0, 0))
legend("center",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("topleft",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("right",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
par(mfrow=c(1, 2), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
legend("right",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("right",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("right",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
legend("right",
legend = c("Mee eens", "Overgeslagen"),
fill = c("green", "red"))
par(mfrow=c(1, 2), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 2), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 2), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 1), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 1), mar=c(0, 0, 0, 0))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 1), mar=c(5,5,5,5))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten"
)
par(mfrow=c(1, 1), mar=c(5,5,5,5))
survey <- read.table(text =
"V1 V2 V3 V4 V5 V6 V7 V8 V9 V10
5 6 5 5 5 5 5 4 5 5
2 1 2 2 2 2 2 3 2 2",
header = TRUE)
barplot(
as.matrix(survey),
col=c("green","red"),
xlab="Vragen",
ylab="Respondenten",
main="Mini enquÃªte"
)
par(mfrow=c(1, 1), mar=c(5,5,5,5))
500 * 4
16 * 500
4 * 500
0,27*4
0.27*4
0.27*4*500
?qnorm
qnorm(0.025,75,15/sqrt(40))
sd <- 2.8n <- 9m <- c(8, 9, 10, 13, 14, 16, 17, 20, 21)
sd <- 2,8n <- 9
sd <- 2.8n <- 9
sd <- c(2.8)n <- 9m <- c(8, 9, 10, 13, 14, 16, 17, 20, 21)
sd <- c(2.8)n <- 9m <- c(8, 9, 10, 13, 14, 16, 17, 20, 21)
n <- 9
sd <- as.double(2.8)
m <- c(8, 9, 10, 13, 14, 16, 17, 20, 21)
mmean <- mean(m)
mmean
sd(mmean)
sd(m)
qnorm(0.95, #95% confidence interval      mmean,      sd      )
#95% confidence interval
qnorm(as.double(0.95), #95% confidence interval      mmean,      sd      )
qnorm(as.double(0.95), #95% confidence interval      mmean,      sd      )
qnorm(as.double(0.95), #95% confidence interval      mmean,      sd      )
qnorm(as.double(0.95),       mmean,      sd      )
qnorm(as.double(0.95),       mmean,      sd      )
qnorm(as.double(0.95),       mmean,      sd      )
msd <- sd(m)
qnorm(as.double(0.95), mmean, msd)
qnorm(as.double(0.95), mmean, msd)
qnorm(as.double(0.99), mmean, msd)
mmean2 <- mean(m)msd2 <- sd(m)
mmean2 <- mean(m)msd2 <- sd(m)
mmean2 <- mean(m)
msd2 <- sd(m)
?qt
length(m)
msd2
mmean2 + qt(1-0.95,mlen2-1) * msd2/sqrt(mlen2)
mlen2 <- length(m)
mmean2 + qt(1-0.95,mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(1-0.99,mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(1-0.95/2,mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(1-0.99/2,mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(0.95 + 1-0.95/2,mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(0.95 + (1 - 0.95/2,mlen2-1)) * msd2/sqrt(mlen2)
mmean2 + qt(0.95 + (1 - 0.95/2,mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(0.95 + (1 - 0.95/2,mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(0.95 + (1 - 0.95/2),mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(0.95 + (1 - 0.95/2),mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(1-0.95/2,mlen2-1) * msd2/sqrt(mlen2)
(0.95 + (1 - 0.95/2)
(0.95 + (1 - 0.95/2)
0.95 + (1 - 0.95/2)
0.95 + (1 - 0.95/2)
mmean2 + qt(0.95 + (1 - 0.95/2),mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(0.05 + (1 - 0.95/2),mlen2-1) * msd2/sqrt(mlen2)
1 - 0.95
mmean2 + qt(0.95 + (1 - 0.95/2),mlen2-1) * msd2/sqrt(mlen2)
0.95 + (1 - 0.95/2)
1 - 0.95/2
mmean2 + qt(1 - 0.95 + (1 - 0.95/2),mlen2-1) * msd2/sqrt(mlen2)
mmean2 + qt(1 - 0.99 + (1 - 0.99/2),mlen2-1) * msd2/sqrt(mlen2)
14.52724 - 14.32325
14.28281 - 14.24241
imean + qt(1-0.92, individuals-1) * isd/sqrt(individuals)
individuals <- 25imean <- 22isd <- 2
individuals <- 25imean <- 22isd <- 2
individuals <- 25
imean <- 22
isd <- 2
imean + qt(1-0.92, individuals-1) * isd/sqrt(individuals)
imean + qt(1 - 0.92 + (1-0.92/2), individuals-1) * isd/sqrt(individuals)
imean + qt(1 - 0.92 / 2, individuals-1) * isd/sqrt(individuals)
imean + qt(1 - 0.92 + (1-0.92/2), individuals-1) * isd/sqrt(individuals)
qnorm(1 - 0.92 / 2, imean, 1.8)
qnorm(1-0.92 + (1-0.92/2), imean, 1.8)
qnorm(1-0.95/2, lheightboys-1) * sqrt(vheightboys)/sqrt(lheightboys)
#Mean height of Boysmheightboys <- 172#Amount of Boyslheightboys <- 12#Variance of samplevheightboys <- 62#Mean height of Girlsmheightgirls <- 166#Amount of Girlslheightgirls <- 12#Variance of samplevheightgirls <- 65
mheightboys <- 172
lheightboys <- 12
vheightboys <- 62
mheightgirls <- 166
lheightgirls <- 12
vheightgirls <- 65
qnorm(1-0.95/2, lheightboys-1) * sqrt(vheightboys)/sqrt(lheightboys)
qnorm(1-0.9 + (1-0.95/2), lheightboys-1) * sqrt(vheightboys)/sqrt(lheightboys)
qnorm(1-0.95/2, lheightgirls-1) * sqrt(vheightgirls)/sqrt(lheightgirls)
qnorm(1-0.9 + (1-0.95/2), lheightgirls-1) * sqrt(vheightgirls)/sqrt(lheightgirls)
qnorm(1-0.99/2, lheightboys-1) * sqrt(vheightboys)/sqrt(lheightboys)
qnorm(1-0.99 + (1-0.99/2), lheightboys-1) * sqrt(vheightboys)/sqrt(lheightboys)
qnorm(1-0.99/2, lheightgirls-1) * sqrt(vheightgirls)/sqrt(lheightgirls)
qnorm(1-0.99 + (1-0.99/2), lheightgirls-1) * sqrt(vheightgirls)/sqrt(lheightgirls)
qnorm(1-0.92/2, lheightboys-1) * sqrt(vheightboys)/sqrt(lheightboys)
qnorm(1-0.92 + (1-0.92/2), lheightboys-1) * sqrt(vheightboys)/sqrt(lheightboys)
qnorm(1-0.92/2, lheightgirls-1) * sqrt(vheightgirls)/sqrt(lheightgirls)
qnorm(1-0.92 + (1-0.92/2), lheightgirls-1) * sqrt(vheightgirls)/sqrt(lheightgirls)
temps <- c(98.2,98.5,98.3,98.1,98.3,98.7,98.1,98.4,98.2,98.4,98.3,98.2)
temps <- c(98.2,98.5,98.3,98.1,98.3,98.7,98.1,98.4,98.2,98.4,98.3,98.2)mtemps <- mean(temps)
temps <- c(98.2,98.5,98.3,98.1,98.3,98.7,98.1,98.4,98.2,98.4,98.3,98.2)
mtemps <- mean(temps)
mtemps
stemps <- sd(temps)
stemps
temps <- c(98.2,98.5,98.3,98.1,98.3,98.7,98.1,98.4,98.2,98.4,98.3,98.2)
ltemps <- length(temps)
mtemps <- mean(temps)
stemps <- sd(temps)
intervals <- c(0.95, 0.99)
mtemps + qt(1 - intervals + (1 - intervals5/2),mlen2-1) * stemps/sqrt(ltemps)
mtemps + qt(1 - intervals + (1 - intervals/2),mlen2-1) * stemps/sqrt(ltemps)
mtemps + qt(1 - intervals/2,mlen2-1) * stemps/sqrt(ltemps)
mtemps + qt(1 - intervals + (1 - intervals/2),mlen2-1) * stemps/sqrt(ltemps)
qnorm(1-0.95/2, ltemps-1) * stemps / sqrt(ltemps)
qnorm(1-0.95/2, ltemps-1) * 0.15 / sqrt(ltemps)
qnorm(1-0.95 + (1-0.95/2), ltemps-1) * 0.15 / sqrt(ltemps)
setwd("C:/Users/Wim/Desktop/data_science/statistics/case")
train <- read.csv("train.csv", header=T)
train <- as.data.frame(train)
View(train)
survivors <- train[train$Survived==1,]
female_survivors <- survivors[survivors$Sex == "female",]
male_survivors <- survivors[survivors$Sex == "male",]
female_survivors
t.test(female_survivors, male_survivors)
females <- survivors[train$Sex == "female",]
males <- survivors[train$Sex == "male",]
t.test(female_survivors, male_survivors)
females <- survivors[train$Sex == "female",]
males <- survivors[train$Sex == "male",]
males
males <- survivors[train$Sex == "male",]
males
females <- train[train$Sex == "female",]
males <- train[train$Sex == "male",]
t.test(female_survivors, male_survivors)
females
males
t.test(females, males)
t.test(females$Survived, males$Survived)
t.test(1, 1)
t.test(c(1), c(1))
t.test(c(1,2), c(1,2))
t.test(c(1,2,3), c(1,2,3))
t.test(c(1,2,3), c(1,2,3,6))
plot(females$Survived)
par(mar=c(1,1,1,1))
plot(females$Survived)
t.test(train[females$Survived==T,], train[males$Survived==T,])
t.test(females$Survived==T, males$Survived)
length(females)
length(males)
count(males)
t.test(females$Survived==T, males$Survived, conf.level = 0.9)
t.test(females$Survived==T, males$Survived, conf.level = 0.2)
females <- train[train$Sex == "female",]
females$Age
levels(females$Age)
females[!is.na(females$Age),]
levels(females[!is.na(females$Age),]$Age)
levels(as.factor(females[!is.na(females$Age),]$Age))
mean(5)
females <- train[train$Sex == "female",]
males <- train[train$Sex == "male",]
t.test(females$Survived, males$Survived, alternative="two.sided")
mean(females)
mean(females#Survived)
mean(females$Survived)
mean(females$Survived)
t.test(females$Survived, males$Survived, alternative="two.sided")
t.test(females$Survived, males$Survived, alternative="greater")
t.test(females$Survived, males$Survived, alternative="less")
?t.test
t.test(females$Survived, males$Survived, alternative="two.sided")
t.test(c(1,2), c(1,2), alternative="two.sided")
t.test(c(1,2), c(1,2), alternative="less")
t.test(c(1,2), c(1,2,3), alternative="less")
t.test(c(1,2,5,6,1000), c(1,2,3), alternative="less")
t.test(females$Survived, males$Survived, alternative="two.sided")
t.test(females$Survived, males$Survived, alternative="two.sided")
train[train$Age <= 8 || train$Age >= 65,]
train$Age <= 8
train$Age >= 65
train[train$Age <= 8 || train$Age >= 65,]
train[train$Age <= 8 && train$Age >= 65,]
train[train$Age <= 8 & train$Age >= 65,]
train[train$Age <= 8 && train$Age >= 65,]
train[8 <= train$Age >= 65,]
train[8 >= train$Age >= 65,]
train[8 >= train$Age & train$Age >= 65,]
8 >= train$Age
5,]
train$Age >= 65
train[8 >= train$Age && train$Age >= 65,]
train[8 >= train$Age && train$Age >= 65,]
train[8 >= train$Age && train$Age >= 65,]
8 >= train$Age && train$Age >= 65
criticals <- merge(
train[8 >= train$Age,],
train[train$Age >= 65,]
)
criticals <- merge(
train[8 >= train$Age,],
train[train$Age >= 65,]
)
noncriticals <- merge(
train[8 <= train$Age,],
train[train$Age <= 65,]
)
t.test(criticals, noncriticals, alternative="two.sided")
noncriticals <- merge(
train[8 <= train$Age,],
train[train$Age <= 65,]
)
noncriticals
criticals
train[8 >= train$Age,]
train[8 >= train$Age,]
rain[train$Age <= 8 & train$Age => 65,]
train[train$Age <= 8 & train$Age => 65,]
train[train$Age <= 8 & train$Age >= 65,]
rain[train$Age <= 8 && train$Age >= 65,]
train[train$Age <= 8 && train$Age >= 65,]
train[train$Age <= 8 | train$Age >= 65,]
criticals <- train[train$Age <= 8 | train$Age >= 65,]
noncriticals <- train[train$Age >= 8 | train$Age <= 65,]
t.test(criticals, noncriticals, alternative="two.sided")
criticals
noncriticals <- train[train$Age >= 8 | train$Age <= 65,]
noncriticals
t.test(criticals$Survived, noncriticals$Survived, alternative="two.sided")
criticals <- train[train$Age <= 8 | train$Age >= 65,]
noncriticals <- train[train$Age >= 8 | train$Age <= 65,]
t.test(noncriticals$Survived, criticals$Survived, alternative="greater")
noncriticals$Survived
criticals$Survived
t.test(noncriticals$Survived, criticals$Survived, alternative="greater")
1ps <- train[train$Pclass == 1,]
ps1 <- train[train$Pclass == 1,]
ps1 <- train[train$Pclass == 1,]
ps2 <- train[train$Pclass == 2,]
ps3 <- train[train$Pclass == 3,]
ps1 <- train[train$Pclass == 1,]
ps2 <- train[train$Pclass == 2,]
ps3 <- train[train$Pclass == 3,]
t.test(ps1$Survived, ps2$Survived, alternative="two.sided")
t.test(ps3$Survived, ps2$Survived, alternative="upper")
t.test(ps3$Survived, ps2$Survived, alternative="greater")
ps3$Survived
ps2$Survived
t.test(ps2$Survived, ps1$Survived, alternative="greater")
t.test(ps3$Survived, ps1$Survived, alternative="greater")
ps3$Survived
ps2$Survived
t.test(ps1$Survived, ps2$Survived, alternative="greater")
t.test(ps2$Survived, ps3$Survived, alternative="greater")
t.test(ps1$Survived, ps3$Survived, alternative="greater")
t.test(ps1$Survived, ps2$Survived, alternative="greater")
t.test(ps2$Survived, ps1$Survived, alternative="greater")
t.test(ps3$Survived, ps1$Survived, alternative="greater")
t.test(ps2$Survived, ps1$Survived, alternative="greater")
t.test(ps3$Survived, ps1$Survived, alternative="greater")
t.test(ps3$Survived, ps2$Survived, alternative="greater")
t.test(ps2$Survived, ps1$Survived, alternative="greater")
t.test(ps2$Survived, ps1$Survived, alternative="greater")
t.test(ps1$Survived, ps2$Survived, alternative="greater")
t.test(ps3$Survived, ps2$Survived, alternative="greater")
ps3$Survived
ps2$Survived
t.test(ps3$Survived, ps2$Survived, alternative="greater")
t.test(ps3$Survived, ps2$Survived, alternative="greater")
t.test(ps1$Survived, ps3$Survived, alternative="greater")
t.test(c(5),c(10), alternative="greater")
t.test(c(5),c(10), alternative="greater"))
t.test(c(5),c(10), alternative="greater")
t.test(c(5,6),c(10,5), alternative="greater")
t.test(c(10,5),c(6,5), alternative="greater")
t.test(1:2,1:99999999999, alternative="greater")
t.test(1:2,1:9999, alternative="greater")
a = c(12.9, 13.5, 12.8, 15.6, 17.2, 19.2, 12.6, 15.3, 14.4, 11.3)
b = c(12.0, 12.2, 11.2, 13.0, 15.0, 15.8, 12.2, 13.4, 12.9, 11.0)
t.test(a,b, paired=TRUE, alt="greater")
mean(a)
mean(b)
t.test(ps3$Survived, ps2$Survived, alternative="greater")
ps3$Survived
ps3[ps3$Survived == T]
ps3[ps3$Survived == T,]
sum(ps3$Survived == T)
sum(ps2$Survived == T)
sum(ps1$Survived == T)
t.test(ps1$Survived, ps2$Survived, alternative="greater")
t.test(ps1$Survived, ps2$Survived, alternative="greater")
t.test(ps1$Survived, ps3$Survived, alternative="greater")
t.test(ps2$Survived, ps1$Survived, alternative="greater")
